/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OVM_CrossDomainEnabled,
  OVM_CrossDomainEnabledInterface,
} from "../../../../../@eth-optimism/contracts/libraries/bridge/OVM_CrossDomainEnabled";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_messenger",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "messenger",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161014c38038061014c8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060b9806100936000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633cb747bf14602d575b600080fd5b6033605f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea2646970667358221220f092b15c72d0ce075d66297e03e4b5f8f6789ca748b9709c7f6bb255ac009ae164736f6c63430007060033";

type OVM_CrossDomainEnabledConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OVM_CrossDomainEnabledConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OVM_CrossDomainEnabled__factory extends ContractFactory {
  constructor(...args: OVM_CrossDomainEnabledConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _messenger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OVM_CrossDomainEnabled> {
    return super.deploy(
      _messenger,
      overrides || {}
    ) as Promise<OVM_CrossDomainEnabled>;
  }
  override getDeployTransaction(
    _messenger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_messenger, overrides || {});
  }
  override attach(address: string): OVM_CrossDomainEnabled {
    return super.attach(address) as OVM_CrossDomainEnabled;
  }
  override connect(signer: Signer): OVM_CrossDomainEnabled__factory {
    return super.connect(signer) as OVM_CrossDomainEnabled__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OVM_CrossDomainEnabledInterface {
    return new utils.Interface(_abi) as OVM_CrossDomainEnabledInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OVM_CrossDomainEnabled {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OVM_CrossDomainEnabled;
  }
}
